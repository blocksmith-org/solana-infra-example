// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.3
// source: proto/api.proto

package solgateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SolgatewayClient is the client API for Solgateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolgatewayClient interface {
	//Common
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	//PumpFun
	SubscribePumpFunCreateStream(ctx context.Context, in *SubscribePumpFunCreateStreamRequest, opts ...grpc.CallOption) (Solgateway_SubscribePumpFunCreateStreamClient, error)
	SubscribePumpFunWithdrawStream(ctx context.Context, in *SubscribePumpFunWithdrawStreamRequest, opts ...grpc.CallOption) (Solgateway_SubscribePumpFunWithdrawStreamClient, error)
	SubscribePumpFunSwapStream(ctx context.Context, in *SubscribePumpFunSwapStreamRequest, opts ...grpc.CallOption) (Solgateway_SubscribePumpFunSwapStreamClient, error)
	PumpFunSwap(ctx context.Context, in *PumpFunSwapRequest, opts ...grpc.CallOption) (*PumpFunSwapResponse, error)
	//Raydium
	SubscribeRaydiumCreateStream(ctx context.Context, in *SubscribeRaydiumCreateStreamRequest, opts ...grpc.CallOption) (Solgateway_SubscribeRaydiumCreateStreamClient, error)
	SubscribeRaydiumSwapStream(ctx context.Context, in *SubscribeRaydiumSwapStreamRequest, opts ...grpc.CallOption) (Solgateway_SubscribeRaydiumSwapStreamClient, error)
	RaydiumSwap(ctx context.Context, in *RaydiumSwapRequest, opts ...grpc.CallOption) (*RaydiumSwapResponse, error)
}

type solgatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewSolgatewayClient(cc grpc.ClientConnInterface) SolgatewayClient {
	return &solgatewayClient{cc}
}

func (c *solgatewayClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := c.cc.Invoke(ctx, "/solgateway.solgateway/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solgatewayClient) SubscribePumpFunCreateStream(ctx context.Context, in *SubscribePumpFunCreateStreamRequest, opts ...grpc.CallOption) (Solgateway_SubscribePumpFunCreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Solgateway_ServiceDesc.Streams[0], "/solgateway.solgateway/SubscribePumpFunCreateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &solgatewaySubscribePumpFunCreateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Solgateway_SubscribePumpFunCreateStreamClient interface {
	Recv() (*SubscribePumpFunCreateStreamResponse, error)
	grpc.ClientStream
}

type solgatewaySubscribePumpFunCreateStreamClient struct {
	grpc.ClientStream
}

func (x *solgatewaySubscribePumpFunCreateStreamClient) Recv() (*SubscribePumpFunCreateStreamResponse, error) {
	m := new(SubscribePumpFunCreateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *solgatewayClient) SubscribePumpFunWithdrawStream(ctx context.Context, in *SubscribePumpFunWithdrawStreamRequest, opts ...grpc.CallOption) (Solgateway_SubscribePumpFunWithdrawStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Solgateway_ServiceDesc.Streams[1], "/solgateway.solgateway/SubscribePumpFunWithdrawStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &solgatewaySubscribePumpFunWithdrawStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Solgateway_SubscribePumpFunWithdrawStreamClient interface {
	Recv() (*SubscribePumpFunWithdrawStreamResponse, error)
	grpc.ClientStream
}

type solgatewaySubscribePumpFunWithdrawStreamClient struct {
	grpc.ClientStream
}

func (x *solgatewaySubscribePumpFunWithdrawStreamClient) Recv() (*SubscribePumpFunWithdrawStreamResponse, error) {
	m := new(SubscribePumpFunWithdrawStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *solgatewayClient) SubscribePumpFunSwapStream(ctx context.Context, in *SubscribePumpFunSwapStreamRequest, opts ...grpc.CallOption) (Solgateway_SubscribePumpFunSwapStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Solgateway_ServiceDesc.Streams[2], "/solgateway.solgateway/SubscribePumpFunSwapStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &solgatewaySubscribePumpFunSwapStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Solgateway_SubscribePumpFunSwapStreamClient interface {
	Recv() (*SubscribePumpFunSwapStreamResponse, error)
	grpc.ClientStream
}

type solgatewaySubscribePumpFunSwapStreamClient struct {
	grpc.ClientStream
}

func (x *solgatewaySubscribePumpFunSwapStreamClient) Recv() (*SubscribePumpFunSwapStreamResponse, error) {
	m := new(SubscribePumpFunSwapStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *solgatewayClient) PumpFunSwap(ctx context.Context, in *PumpFunSwapRequest, opts ...grpc.CallOption) (*PumpFunSwapResponse, error) {
	out := new(PumpFunSwapResponse)
	err := c.cc.Invoke(ctx, "/solgateway.solgateway/PumpFunSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solgatewayClient) SubscribeRaydiumCreateStream(ctx context.Context, in *SubscribeRaydiumCreateStreamRequest, opts ...grpc.CallOption) (Solgateway_SubscribeRaydiumCreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Solgateway_ServiceDesc.Streams[3], "/solgateway.solgateway/SubscribeRaydiumCreateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &solgatewaySubscribeRaydiumCreateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Solgateway_SubscribeRaydiumCreateStreamClient interface {
	Recv() (*SubscribeRaydiumCreateStreamResponse, error)
	grpc.ClientStream
}

type solgatewaySubscribeRaydiumCreateStreamClient struct {
	grpc.ClientStream
}

func (x *solgatewaySubscribeRaydiumCreateStreamClient) Recv() (*SubscribeRaydiumCreateStreamResponse, error) {
	m := new(SubscribeRaydiumCreateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *solgatewayClient) SubscribeRaydiumSwapStream(ctx context.Context, in *SubscribeRaydiumSwapStreamRequest, opts ...grpc.CallOption) (Solgateway_SubscribeRaydiumSwapStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Solgateway_ServiceDesc.Streams[4], "/solgateway.solgateway/SubscribeRaydiumSwapStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &solgatewaySubscribeRaydiumSwapStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Solgateway_SubscribeRaydiumSwapStreamClient interface {
	Recv() (*SubscribeRaydiumSwapStreamResponse, error)
	grpc.ClientStream
}

type solgatewaySubscribeRaydiumSwapStreamClient struct {
	grpc.ClientStream
}

func (x *solgatewaySubscribeRaydiumSwapStreamClient) Recv() (*SubscribeRaydiumSwapStreamResponse, error) {
	m := new(SubscribeRaydiumSwapStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *solgatewayClient) RaydiumSwap(ctx context.Context, in *RaydiumSwapRequest, opts ...grpc.CallOption) (*RaydiumSwapResponse, error) {
	out := new(RaydiumSwapResponse)
	err := c.cc.Invoke(ctx, "/solgateway.solgateway/RaydiumSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolgatewayServer is the server API for Solgateway service.
// All implementations must embed UnimplementedSolgatewayServer
// for forward compatibility
type SolgatewayServer interface {
	//Common
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	//PumpFun
	SubscribePumpFunCreateStream(*SubscribePumpFunCreateStreamRequest, Solgateway_SubscribePumpFunCreateStreamServer) error
	SubscribePumpFunWithdrawStream(*SubscribePumpFunWithdrawStreamRequest, Solgateway_SubscribePumpFunWithdrawStreamServer) error
	SubscribePumpFunSwapStream(*SubscribePumpFunSwapStreamRequest, Solgateway_SubscribePumpFunSwapStreamServer) error
	PumpFunSwap(context.Context, *PumpFunSwapRequest) (*PumpFunSwapResponse, error)
	//Raydium
	SubscribeRaydiumCreateStream(*SubscribeRaydiumCreateStreamRequest, Solgateway_SubscribeRaydiumCreateStreamServer) error
	SubscribeRaydiumSwapStream(*SubscribeRaydiumSwapStreamRequest, Solgateway_SubscribeRaydiumSwapStreamServer) error
	RaydiumSwap(context.Context, *RaydiumSwapRequest) (*RaydiumSwapResponse, error)
	mustEmbedUnimplementedSolgatewayServer()
}

// UnimplementedSolgatewayServer must be embedded to have forward compatible implementations.
type UnimplementedSolgatewayServer struct {
}

func (UnimplementedSolgatewayServer) SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedSolgatewayServer) SubscribePumpFunCreateStream(*SubscribePumpFunCreateStreamRequest, Solgateway_SubscribePumpFunCreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePumpFunCreateStream not implemented")
}
func (UnimplementedSolgatewayServer) SubscribePumpFunWithdrawStream(*SubscribePumpFunWithdrawStreamRequest, Solgateway_SubscribePumpFunWithdrawStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePumpFunWithdrawStream not implemented")
}
func (UnimplementedSolgatewayServer) SubscribePumpFunSwapStream(*SubscribePumpFunSwapStreamRequest, Solgateway_SubscribePumpFunSwapStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePumpFunSwapStream not implemented")
}
func (UnimplementedSolgatewayServer) PumpFunSwap(context.Context, *PumpFunSwapRequest) (*PumpFunSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PumpFunSwap not implemented")
}
func (UnimplementedSolgatewayServer) SubscribeRaydiumCreateStream(*SubscribeRaydiumCreateStreamRequest, Solgateway_SubscribeRaydiumCreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRaydiumCreateStream not implemented")
}
func (UnimplementedSolgatewayServer) SubscribeRaydiumSwapStream(*SubscribeRaydiumSwapStreamRequest, Solgateway_SubscribeRaydiumSwapStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRaydiumSwapStream not implemented")
}
func (UnimplementedSolgatewayServer) RaydiumSwap(context.Context, *RaydiumSwapRequest) (*RaydiumSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaydiumSwap not implemented")
}
func (UnimplementedSolgatewayServer) mustEmbedUnimplementedSolgatewayServer() {}

// UnsafeSolgatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolgatewayServer will
// result in compilation errors.
type UnsafeSolgatewayServer interface {
	mustEmbedUnimplementedSolgatewayServer()
}

func RegisterSolgatewayServer(s grpc.ServiceRegistrar, srv SolgatewayServer) {
	s.RegisterService(&Solgateway_ServiceDesc, srv)
}

func _Solgateway_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolgatewayServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solgateway.solgateway/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolgatewayServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Solgateway_SubscribePumpFunCreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePumpFunCreateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolgatewayServer).SubscribePumpFunCreateStream(m, &solgatewaySubscribePumpFunCreateStreamServer{stream})
}

type Solgateway_SubscribePumpFunCreateStreamServer interface {
	Send(*SubscribePumpFunCreateStreamResponse) error
	grpc.ServerStream
}

type solgatewaySubscribePumpFunCreateStreamServer struct {
	grpc.ServerStream
}

func (x *solgatewaySubscribePumpFunCreateStreamServer) Send(m *SubscribePumpFunCreateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Solgateway_SubscribePumpFunWithdrawStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePumpFunWithdrawStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolgatewayServer).SubscribePumpFunWithdrawStream(m, &solgatewaySubscribePumpFunWithdrawStreamServer{stream})
}

type Solgateway_SubscribePumpFunWithdrawStreamServer interface {
	Send(*SubscribePumpFunWithdrawStreamResponse) error
	grpc.ServerStream
}

type solgatewaySubscribePumpFunWithdrawStreamServer struct {
	grpc.ServerStream
}

func (x *solgatewaySubscribePumpFunWithdrawStreamServer) Send(m *SubscribePumpFunWithdrawStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Solgateway_SubscribePumpFunSwapStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePumpFunSwapStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolgatewayServer).SubscribePumpFunSwapStream(m, &solgatewaySubscribePumpFunSwapStreamServer{stream})
}

type Solgateway_SubscribePumpFunSwapStreamServer interface {
	Send(*SubscribePumpFunSwapStreamResponse) error
	grpc.ServerStream
}

type solgatewaySubscribePumpFunSwapStreamServer struct {
	grpc.ServerStream
}

func (x *solgatewaySubscribePumpFunSwapStreamServer) Send(m *SubscribePumpFunSwapStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Solgateway_PumpFunSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PumpFunSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolgatewayServer).PumpFunSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solgateway.solgateway/PumpFunSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolgatewayServer).PumpFunSwap(ctx, req.(*PumpFunSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Solgateway_SubscribeRaydiumCreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRaydiumCreateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolgatewayServer).SubscribeRaydiumCreateStream(m, &solgatewaySubscribeRaydiumCreateStreamServer{stream})
}

type Solgateway_SubscribeRaydiumCreateStreamServer interface {
	Send(*SubscribeRaydiumCreateStreamResponse) error
	grpc.ServerStream
}

type solgatewaySubscribeRaydiumCreateStreamServer struct {
	grpc.ServerStream
}

func (x *solgatewaySubscribeRaydiumCreateStreamServer) Send(m *SubscribeRaydiumCreateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Solgateway_SubscribeRaydiumSwapStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRaydiumSwapStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolgatewayServer).SubscribeRaydiumSwapStream(m, &solgatewaySubscribeRaydiumSwapStreamServer{stream})
}

type Solgateway_SubscribeRaydiumSwapStreamServer interface {
	Send(*SubscribeRaydiumSwapStreamResponse) error
	grpc.ServerStream
}

type solgatewaySubscribeRaydiumSwapStreamServer struct {
	grpc.ServerStream
}

func (x *solgatewaySubscribeRaydiumSwapStreamServer) Send(m *SubscribeRaydiumSwapStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Solgateway_RaydiumSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaydiumSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolgatewayServer).RaydiumSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solgateway.solgateway/RaydiumSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolgatewayServer).RaydiumSwap(ctx, req.(*RaydiumSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Solgateway_ServiceDesc is the grpc.ServiceDesc for Solgateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Solgateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "solgateway.solgateway",
	HandlerType: (*SolgatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _Solgateway_SendTransaction_Handler,
		},
		{
			MethodName: "PumpFunSwap",
			Handler:    _Solgateway_PumpFunSwap_Handler,
		},
		{
			MethodName: "RaydiumSwap",
			Handler:    _Solgateway_RaydiumSwap_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePumpFunCreateStream",
			Handler:       _Solgateway_SubscribePumpFunCreateStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribePumpFunWithdrawStream",
			Handler:       _Solgateway_SubscribePumpFunWithdrawStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribePumpFunSwapStream",
			Handler:       _Solgateway_SubscribePumpFunSwapStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeRaydiumCreateStream",
			Handler:       _Solgateway_SubscribeRaydiumCreateStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeRaydiumSwapStream",
			Handler:       _Solgateway_SubscribeRaydiumSwapStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}
